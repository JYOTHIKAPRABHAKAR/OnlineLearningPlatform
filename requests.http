### Online Learning Platform API Tests
### Base URL: http://localhost:3000

### Variables
@baseUrl = http://localhost:3000
@learnerToken = {{loginLearner.response.body.data.token}}
@educatorToken = {{loginEducator.response.body.data.token}}

### ========================================
### AUTHENTICATION ENDPOINTS
### ========================================

### Register a new learner
# @name registerLearner
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
    "email": "testlearner@example.com",
    "password": "TestPass123",
    "firstName": "Test",
    "lastName": "Learner",
    "targetExam": "JEE Main",
    "preferredLanguage": "English",
    "phone": "+91-9876543210"
}

### Register a new educator
# @name registerEducator
POST {{baseUrl}}/api/auth/educator/register
Content-Type: application/json

{
    "email": "testeducator@example.com",
    "password": "TestPass123",
    "firstName": "Test",
    "lastName": "Educator",
    "bio": "Experienced educator with 10+ years of teaching",
    "subjects": "Mathematics,Physics",
    "experience": 10,
    "qualification": "Ph.D. Mathematics, IIT Delhi"
}

### Login as learner
# @name loginLearner
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
    "email": "john.doe@example.com",
    "password": "password123"
}

### Login as educator
# @name loginEducator
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
    "email": "prof.kumar@example.com",
    "password": "password123"
}

### Get current user profile
GET {{baseUrl}}/api/auth/profile
Authorization: Bearer {{learnerToken}}

### Update user profile
PUT {{baseUrl}}/api/auth/profile
Authorization: Bearer {{learnerToken}}
Content-Type: application/json

{
    "firstName": "Updated",
    "lastName": "Name",
    "targetExam": "NEET",
    "preferredLanguage": "Hindi"
}

### Change password
PUT {{baseUrl}}/api/auth/change-password
Authorization: Bearer {{learnerToken}}
Content-Type: application/json

{
    "currentPassword": "password123",
    "newPassword": "NewPass123"
}

### ========================================
### COURSE ENDPOINTS
### ========================================

### Browse courses (public)
GET {{baseUrl}}/api/courses?exam=JEE Main&subject=Mathematics&type=recorded&page=1&limit=10

### Browse courses with filters
GET {{baseUrl}}/api/courses?minPrice=1000&maxPrice=5000&sort=price&order=ASC

### Get course details (public)
GET {{baseUrl}}/api/courses/1

### Get course reviews (public)
GET {{baseUrl}}/api/courses/1/reviews?limit=5

### Enroll in course (requires authentication)
POST {{baseUrl}}/api/courses/1/enroll
Authorization: Bearer {{learnerToken}}

### Get course progress (requires enrollment)
GET {{baseUrl}}/api/courses/1/progress
Authorization: Bearer {{learnerToken}}

### Get course lessons (requires enrollment)
GET {{baseUrl}}/api/courses/1/lessons
Authorization: Bearer {{learnerToken}}

### Get course tests (requires enrollment)
GET {{baseUrl}}/api/courses/1/tests
Authorization: Bearer {{learnerToken}}

### Get course study materials (requires enrollment)
GET {{baseUrl}}/api/courses/1/materials
Authorization: Bearer {{learnerToken}}

### ========================================
### LESSON ENDPOINTS
### ========================================

### Get lesson details (requires enrollment)
GET {{baseUrl}}/api/lessons/1
Authorization: Bearer {{learnerToken}}

### Update lesson progress (requires enrollment)
POST {{baseUrl}}/api/lessons/1/progress
Authorization: Bearer {{learnerToken}}
Content-Type: application/json

{
    "watchedDuration": 1800,
    "totalDuration": 2700,
    "completionStatus": "in_progress"
}

### Save lesson notes (requires enrollment)
POST {{baseUrl}}/api/lessons/1/notes
Authorization: Bearer {{learnerToken}}
Content-Type: application/json

{
    "note": "Important concept about algebra",
    "timestamp": 120
}

### Get lesson notes (requires enrollment)
GET {{baseUrl}}/api/lessons/1/notes
Authorization: Bearer {{learnerToken}}

### Get free lessons for a course (public)
GET {{baseUrl}}/api/lessons/course/1/free

### ========================================
### TEST ENDPOINTS
### ========================================

### Get available tests (requires authentication)
GET {{baseUrl}}/api/tests?courseId=1&type=mock_test
Authorization: Bearer {{learnerToken}}

### Start a test (requires enrollment)
POST {{baseUrl}}/api/tests/1/start
Authorization: Bearer {{learnerToken}}

### Submit test answers
POST {{baseUrl}}/api/tests/session_001/submit
Authorization: Bearer {{learnerToken}}
Content-Type: application/json

{
    "answers": {
        "1": "4",
        "2": "x = 2, 3",
        "3": "3xÂ²"
    },
    "timeSpent": 180
}

### Get test results
GET {{baseUrl}}/api/tests/session_001/results
Authorization: Bearer {{learnerToken}}

### Get user's test history
GET {{baseUrl}}/api/tests/history?limit=10
Authorization: Bearer {{learnerToken}}

### ========================================
### ERROR TESTING
### ========================================

### Test 400 Bad Request - Invalid email
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
    "email": "invalid-email",
    "password": "TestPass123",
    "firstName": "Test",
    "lastName": "Learner",
    "targetExam": "JEE Main",
    "preferredLanguage": "English"
}

### Test 401 Unauthorized - Missing token
GET {{baseUrl}}/api/auth/profile

### Test 401 Unauthorized - Invalid token
GET {{baseUrl}}/api/auth/profile
Authorization: Bearer invalid_token

### Test 403 Forbidden - Not enrolled in course
GET {{baseUrl}}/api/courses/999/progress
Authorization: Bearer {{learnerToken}}

### Test 404 Not Found - Course doesn't exist
GET {{baseUrl}}/api/courses/999

### Test 409 Conflict - Already enrolled
POST {{baseUrl}}/api/courses/1/enroll
Authorization: Bearer {{learnerToken}}

### Test 422 Validation Error - Missing required fields
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
    "email": "test@example.com"
}

### ========================================
### PAGINATION AND FILTERING TESTS
### ========================================

### Test pagination
GET {{baseUrl}}/api/courses?page=2&limit=5

### Test sorting
GET {{baseUrl}}/api/courses?sort=price&order=DESC

### Test multiple filters
GET {{baseUrl}}/api/courses?exam=NEET&subject=Biology&type=hybrid&minPrice=2000

### ========================================
### RATE LIMITING TEST
### ========================================

### Test rate limiting (make multiple requests quickly)
GET {{baseUrl}}/api/courses
GET {{baseUrl}}/api/courses
GET {{baseUrl}}/api/courses
GET {{baseUrl}}/api/courses
GET {{baseUrl}}/api/courses

### ========================================
### HEALTH CHECK
### ========================================

### Health check endpoint
GET {{baseUrl}}/

### ========================================
### NOTES FOR TESTING
### ========================================

### To test the API:
### 1. Start the server: npm start
### 2. Run the migration: npm run migrate
### 3. Run the seeding: npm run seed
### 4. Use this file with VS Code REST Client extension or similar
### 5. The tokens will be automatically extracted from login responses
### 6. Test both successful and error scenarios
### 7. Verify all middleware (auth, validation, enrollment checks) work correctly

### Sample test data available:
### - Users: john.doe@example.com, jane.smith@example.com, etc.
### - Educators: prof.kumar@example.com, dr.sharma@example.com, etc.
### - Courses: IDs 1-7 with various subjects and types
### - Tests: IDs 1-7 with questions and answers
### - Enrollments: Pre-existing enrollments for testing

### Security features implemented:
### - Password hashing with bcrypt
### - JWT token authentication
### - Role-based access control
### - Input validation and sanitization
### - Rate limiting
### - SQL injection prevention with parameterized queries 